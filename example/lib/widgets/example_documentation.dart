import 'package:flutter/material.dart';

/// Documentation and examples section for the table example
class ExampleDocumentation extends StatelessWidget {
  const ExampleDocumentation({
    super.key,
    required this.showVerticalDividers,
    required this.isSelectable,
    required this.isEditable,
  });

  final bool showVerticalDividers;
  final bool isSelectable;
  final bool isEditable;

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const SizedBox(height: 24),

        // Features info
        Text(
          'Features demonstrated:',
          style: Theme.of(context).textTheme.titleSmall?.copyWith(
                fontWeight: FontWeight.bold,
              ),
        ),
        const SizedBox(height: 8),

        _buildFeaturesList(),

        if (isSelectable) ...[
          const SizedBox(height: 8),
          _buildSelectionFeatures(),
        ],

        if (isEditable) ...[
          const SizedBox(height: 8),
          _buildEditingFeatures(),
        ],

        const SizedBox(height: 16),

        // Controls info
        Text(
          'Interactive Controls:',
          style: Theme.of(context).textTheme.titleSmall?.copyWith(
                fontWeight: FontWeight.bold,
              ),
        ),
        const SizedBox(height: 8),

        _buildControlsList(),

        const SizedBox(height: 16),

        // API Usage Example
        Text(
          'Code Example:',
          style: Theme.of(context).textTheme.titleSmall?.copyWith(
                fontWeight: FontWeight.bold,
              ),
        ),
        const SizedBox(height: 8),

        _buildCodeExample(),
      ],
    );
  }

  Widget _buildFeaturesList() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text('‚Ä¢ Map-based column management with TableColumnsBuilder'),
        const Text('‚Ä¢ Automatic order assignment and conflict prevention'),
        const Text('‚Ä¢ Custom cell builders (Salary formatting, Status badges)'),
        const Text('‚Ä¢ Alternating row colors and responsive layout'),
        const Text('‚Ä¢ Synchronized horizontal and vertical scrolling'),
        const Text('‚Ä¢ Hover-based scrollbar visibility'),
        const Text('‚Ä¢ Column width management with min/max constraints'),
        Text(
          '‚Ä¢ Customizable table borders (${showVerticalDividers ? "Grid" : "Horizontal only"})',
          style: const TextStyle(
              fontWeight: FontWeight.bold, color: Colors.purple),
        ),
        const Text(
          '‚Ä¢ Column reordering via drag and drop',
          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.orange),
        ),
        const Text(
          '‚Ä¢ Column sorting (click header to sort: ‚Üë ‚Üì clear)',
          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.green),
        ),
        const Text(
          '‚Ä¢ Cell editing mode (even custom cells!)',
          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.orange),
        ),
      ],
    );
  }

  Widget _buildSelectionFeatures() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: const [
        Text(
          'Selection Features:',
          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue),
        ),
        Text(
          '‚Ä¢ Individual row selection with checkboxes',
          style: TextStyle(color: Colors.blue),
        ),
        Text(
          '‚Ä¢ Tap anywhere on row to toggle selection',
          style: TextStyle(color: Colors.blue),
        ),
        Text(
          '‚Ä¢ Select all/none with header checkbox',
          style: TextStyle(color: Colors.blue),
        ),
        Text(
          '‚Ä¢ Intuitive select-all behavior (any selected ‚Üí clear all)',
          style: TextStyle(color: Colors.blue),
        ),
        Text(
          '‚Ä¢ Custom selection actions and callbacks',
          style: TextStyle(color: Colors.blue),
        ),
        Text(
          '‚Ä¢ Selection state management by parent widget',
          style: TextStyle(color: Colors.blue),
        ),
        Text(
          '‚Ä¢ Single and Multiple selection modes',
          style: TextStyle(color: Colors.blue, fontWeight: FontWeight.bold),
        ),
      ],
    );
  }

  Widget _buildEditingFeatures() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: const [
        Text(
          'Editing Features:',
          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.orange),
        ),
        Text(
          '‚Ä¢ Click on ANY editable cell to start editing',
          style: TextStyle(color: Colors.orange),
        ),
        Text(
          '‚Ä¢ Custom cells (Salary, Status) also editable!',
          style: TextStyle(color: Colors.orange, fontWeight: FontWeight.bold),
        ),
        Text(
          '‚Ä¢ Salary: Enter numbers (e.g., 80000)',
          style: TextStyle(color: Colors.orange),
        ),
        Text(
          '‚Ä¢ Status: Enter "true/false" or "active/inactive"',
          style: TextStyle(color: Colors.orange),
        ),
        Text(
          '‚Ä¢ Age: Enter numbers only',
          style: TextStyle(color: Colors.orange),
        ),
        Text(
          '‚Ä¢ Beautifully styled inline text fields',
          style: TextStyle(color: Colors.orange),
        ),
        Text(
          '‚Ä¢ Vertically centered text with rounded borders',
          style: TextStyle(color: Colors.orange),
        ),
        Text(
          '‚Ä¢ Press Enter or click away to save changes',
          style: TextStyle(color: Colors.orange),
        ),
        Text(
          '‚Ä¢ Press Escape to cancel editing',
          style: TextStyle(color: Colors.orange),
        ),
        Text(
          '‚Ä¢ Smart data conversion (string ‚Üí number/boolean)',
          style: TextStyle(color: Colors.orange),
        ),
        Text(
          '‚Ä¢ Row selection disabled in editing mode',
          style: TextStyle(color: Colors.orange),
        ),
      ],
    );
  }

  Widget _buildControlsList() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text('‚Ä¢ üîÑ Reset column order to default'),
        const Text('‚Ä¢ üîÄ Clear sort (reset to original order)'),
        const Text(
            '‚Ä¢ üî≤ Toggle vertical dividers (Grid vs Horizontal-only design)'),
        const Text('‚Ä¢ ‚úèÔ∏è Toggle editing mode (Cell editing with text fields)'),
        const Text(
            '‚Ä¢ ‚òëÔ∏è Toggle selection mode (Row selection with checkboxes)'),
        const Text('‚Ä¢ üîò Toggle single/multiple selection mode'),
        const Text('‚Ä¢ üñ±Ô∏è Drag column headers to reorder'),
        const Text('‚Ä¢ üî§ Click sortable column headers to sort'),
        if (isSelectable) ...[
          const Text('‚Ä¢ üßπ Clear all selections'),
          const Text('‚Ä¢ üë• Select only active employees'),
          const Text('‚Ä¢ ‚ÑπÔ∏è Show selected employee details'),
        ],
      ],
    );
  }

  Widget _buildCodeExample() {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.grey.shade100,
        borderRadius: BorderRadius.circular(8),
      ),
      child: const Text(
        '''final columns = TableColumnsBuilder()
  .addColumn('name', TablePlusColumn(
    sortable: true,
    editable: true, // Enable cell editing
    ...
  ))
  .addColumn('salary', TablePlusColumn(
    editable: true, // Custom cells can also be edited!
    cellBuilder: customSalaryBuilder, // Shows formatted in view mode
    // In edit mode: shows raw number for editing
    ...
  ))
  .build();

FlutterTablePlus(
  columns: columns,
  data: data,
  isSelectable: true,
  selectionMode: SelectionMode.single, // Single selection mode
  isEditable: true, // Enable editing mode
  theme: TablePlusTheme(
    editableTheme: TablePlusEditableTheme(
      textAlignVertical: TextAlignVertical.center, // Vertical center
      editingBorderRadius: BorderRadius.circular(6.0), // Rounded
      filled: true, // Fill background
    ),
  ),
  onCellChanged: (columnKey, rowIndex, oldValue, newValue) {
    // Handle data type conversion
    dynamic convertedValue = newValue;
    if (columnKey == 'salary') {
      convertedValue = int.tryParse(newValue) ?? oldValue;
    } else if (columnKey == 'active') {
      convertedValue = newValue.toLowerCase() == 'true' ||
                     newValue.toLowerCase() == 'active';
    }
    
    // Update your data
    setState(() {
      data[rowIndex][columnKey] = convertedValue;
    });
  },
  onRowSelectionChanged: (rowId, isSelected) {
    // Handle selection changes
    setState(() {
      if (selectionMode == SelectionMode.single) {
        selectedRows.clear(); // Clear other selections
        if (isSelected) selectedRows.add(rowId);
      } else {
        // Multiple selection mode
        isSelected ? selectedRows.add(rowId) : selectedRows.remove(rowId);
      }
    });
  },
);''',
        style: TextStyle(
          fontFamily: 'monospace',
          fontSize: 12,
        ),
      ),
    );
  }
}
